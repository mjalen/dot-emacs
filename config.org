#+title: Emacs Config
#+author: Jalen Moore

My personal emacs configuration. Still a work in progress.
-----

* TODOs

- Clean up the mess that is my config.
- Eliminate the need for modifier keys. I should be able to do everything without the use of Ctrl
- Add key bind to traverse up in ~vertico~ while finding a file.

* Preamble
** Lexical scope

Inspired by [[https://blog.sumtypeofway.com/posts/emacs-config.html][this blog post]]. Adds lexical scope to the configuration.

#+begin_src emacs-lisp
  ;; -*- coding: utf-8; lexical-binding: t -*-
#+end_src

** Helper Functions

Different functions to do common tasks.

#+begin_src emacs-lisp
  ; A function I can hook to different modes when I don't want line numbers.
  (defun mjalen/remove_line_numbers ()
    (interactive)
    (display-line-numbers-mode 0))
#+end_src

** Misc.

Get rid of a bunch of UI, we don't need it!

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t
	use-package-always-ensure t
	initial-scratch-message nil
	sentence-end-double-space nil
	ring-bell-function 'ignore
	use-dialog-box nil
	mark-even-if-inactive nil
	default-directory "~"
	display-line-numbers-mode 1
	load-prefer-newer t)

  (setq-default indent-tabs-mode nil)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (delete-selection-mode t)

  (use-package exec-path-from-shell
    :init (exec-path-from-shell-initialize))

  (set-charset-priority 'unicode)
  (prefer-coding-system 'utf-8-unix)

  (use-package s)
  (use-package dash)

  (setq read-process-output-max (* 1024 1024))
#+end_src

** Garbage Collection

#+begin_src emacs-lisp
  (setq gc-cons-threshold 1000000000
        create-lockfiles nil
        make-backup-files nil
        create-lockfiles nil
        delete-by-moving-to-trash t)

  (setq custom-file (make-temp-name "/tmp/")
        custom-safe-themes t)

  (use-package recentf
    :config
    (add-to-list 'recentf-exclude "\\elpa")
    (add-to-list 'recentf-exclude "private/tmp")
    (recentf-mode))

  ; remove whitespace
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
  (setq require-final-newline t)
#+end_src

** Lines

#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (column-number-mode t)
  (setq auto-fill-mode t
        global-visual-fill-column-mode nil)
  (global-visual-line-mode t)
  (blink-cursor-mode t)
  (set-display-table-slot standard-display-table 'wrap ?\ )

  (require 'hl-line)
#+end_src

* Evil Mode

#+begin_src emacs-lisp
  (use-package evil
    :config
    (evil-mode 1))
#+end_src

* Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

* Tree Sitter + LSP

##+begin_src emacs-lisp
  (use-package tree-sitter
    :hook
    (common-lisp-mode . tree-sitter-mode)
    (rust-mode . tree-sitter-mode))

  (use-package tree-sitter-langs)


  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0)
    (corfu-popupinfo-delay '(0.5 . 0.2))
    (corfu-preview-current 'insert)
    (corfu-preselect 'prompt)
    :bind (:map corfu-map
                ("M-SPC" . corfu-insert-seperator)
                ("TAB" . corfu-next)
                ([tab] . corfu-next)
                ("M-TAB" . corfu-previous)
                ([backtab] . corfu-previous)
                ("S-<return>" . corfu-insert)
                ("RET" . corfu-insert))
    :config
    (global-corfu-mode)
    (corfu-history-mode)
    (corfu-popupinfo-mode)
    :config
    (add-hook 'eshell-mode-hook
              (lambda () (setq-local corfu-quit-at-boundary t
                                     corfu-quit-no-match t
                                     corfu-auto nil)
                (corfu-mode))
              nil
              t))

  ; linter
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :bind (:map flycheck-mode-map
                ("M-n" . flycheck-next-error)
                ("M-p" . flycheck-previous-error)))

  (use-package lsp-mode
    :diminish "LSP"
    :ensure t
    :hook ((lsp-mode . lsp-diagnostics-mode)
           (lsp-mode . lsp-enable-which-key-integration)
           ((common-lisp-mode) . lsp-deferred))
    :custom
    (lsp-keymap-prefix "C-c l")
    (lsp-completion-provider :none)       ; Using Corfu as the provider
    (lsp-diagnostics-provider :flycheck)
    (lsp-session-file (locate-user-emacs-file ".lsp-session"))
    (lsp-log-io nil) ; IMPORTANT! Use only for debugging! Drastically affects performance
    (lsp-keep-workspace-alive nil) ; Close LSP server if all project buffers are closed
    (lsp-idle-delay 0.5)    ; Debounce timer for `after-change-function'
    ;; core
    (lsp-enable-xref t)        ; Use xref to find references
    (lsp-auto-configure t) ; Used to decide between current active servers
    (lsp-eldoc-enable-hover t) ; Display signature information in the echo area
    (lsp-enable-dap-auto-configure t)     ; Debug support
    (lsp-enable-file-watchers nil)
    (lsp-enable-folding nil)     ; I disable folding since I use origami
    (lsp-enable-imenu t)
    (lsp-enable-indentation nil)    ; I use prettier
    (lsp-enable-links nil)          ; No need since we have `browse-url'
    (lsp-enable-on-type-formatting nil)   ; Prettier handles this
    (lsp-enable-suggest-server-download t) ; Useful prompt to download LSP providers
    (lsp-enable-symbol-highlighting t) ; Shows usages of symbol at point in the current buffer
    (lsp-enable-text-document-color nil)  ; This is Treesitter's job

    (lsp-ui-sideline-show-hover nil) ; Sideline used only for diagnostics
    (lsp-ui-sideline-diagnostic-max-lines 20) ; 20 lines since typescript errors can be quite big
    ;; completion
    (lsp-completion-enable t)
    (lsp-completion-enable-additional-text-edit t) ; Ex: auto-insert an import for a completion candidate
    (lsp-enable-snippet t)    ; Important to provide full JSX completion
    (lsp-completion-show-kind t)             ; Optional
    ;; headerline
    (lsp-headerline-breadcrumb-enable t) ; Optional, I like the breadcrumbs
    (lsp-headerline-breadcrumb-enable-diagnostics nil) ; Don't make them red, too noisy
    (lsp-headerline-breadcrumb-enable-symbol-numbers nil)
    (lsp-headerline-breadcrumb-icons-enable nil)
    ;; modeline
    (lsp-modeline-code-actions-enable nil) ; Modeline should be relatively clean
    (lsp-modeline-diagnostics-enable nil) ; Already supported through `flycheck'
    (lsp-modeline-workspace-status-enable nil) ; Modeline displays "LSP" when lsp-mode is enabled
    (lsp-signature-doc-lines 1) ; Don't raise the echo area. It's distracting
    (lsp-ui-doc-use-childframe t)        ; Show docs for symbol at point
    (lsp-eldoc-render-all nil) ; This would be very useful if it would respect `lsp-signature-doc-lines', currently it's distracting
    ;; lens
    (lsp-lens-enable nil)                 ; Optional, I don't need it
    ;; semantic
    (lsp-semantic-tokens-enable nil) ; Related to highlighting, and we defer to treesitter

    :init
    (setq lsp-use-plists t))

  (use-package lsp-ui
    :ensure t
    :commands
    (lsp-ui-doc-show
     lsp-ui-doc-glance)
    :bind (:map lsp-mode-map
                ("C-c C-d" . 'lsp-ui-doc-glance))
    :after (lsp-mode evil)
    :config (setq lsp-ui-doc-enable t
                  evil-lookup-func #'lsp-ui-doc-glance
                  lsp-ui-doc-show-with-cursor nil
                  lsp-ui-doc-include-signature t
                  lsp-ui-doc-position 'at-point))
##+end_src

* Theme
** Baseline

I *had* to switch over to the ~modus-vivendi~ theme. It may be ugly, but my eyes feel much better. Future me: the theme has honestly grown on me. It is very pleasant to look at for long periods of time.

#+begin_src emacs-lisp
  (load-theme 'modus-vivendi t)

  (set-frame-parameter nil 'alpha-background 90)
  (add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

** Icons

#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** Modeline

A nice modeline that cleans up the clutter.

#+begin_src emacs-lisp
  (use-package diminish
    :config
    (diminish 'visual-line-mode))

  (use-package mood-line
    :config (mood-line-mode))
#+end_src

** Dimmer

This essentially dims non-active buffers. Makes the current buffer more apparent.

#+begin_src emacs-lisp
  (use-package dimmer
    :custom (dimmer-fraction 0.3)
    :config (dimmer-mode))
#+end_src

** Delimiters

Make delimiters and parentheses easier to follow

#+begin_src emacs-lisp
  (use-package paren
    :config (show-paren-mode)
    :custom (show-paren-style 'expression))

  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

** Fonts

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Victor Mono-12"))
  (set-frame-font "Victor Mono-12")
#+end_src

** Indent Guides

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :custom
    (highlight-indent-guides-method 'bitmap)
    :config
    (set-face-background 'highlight-indent-guides-odd-face "ffffff")
    (set-face-background 'highlight-indent-guides-even-face "ffffff")
    (set-face-foreground 'highlight-indent-guides-character-face "ffffff")
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
 #+end_src

** Dired

#+begin_src emacs-lisp
  (progn
    (use-package all-the-icons-dired)
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+end_src

* Keybinds

#+begin_src emacs-lisp
  ;; first we unbind
  (-map (lambda (x) (unbind-key x)) '("C-x C-d"
                                      "M-o"
                                      "<mouse-2>"
                                      "<C-wheel-down>"
                                      "<C-wheel-up>"
                                      "s-n"
                                      "C-x C-q"
                                      "C-c C-k"))

  (bind-key "C-c /" #'comment-dwim)
  (bind-key "C-c C-'" #'org-edit-src-exit)

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.2)
    (which-key-enable-god-mode-support))
#+end_src

* Completion

#+begin_src emacs-lisp
  (use-package vertico :init (vertico-mode)) ; Vertical display of completion options.
  (use-package orderless) ; Actual completion style.
  (use-package marginalia :init (marginalia-mode)) ; Displays margin info to the right of completion options.

  (setq read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t
        completion-styles '(orderless basic)
        completion-category-defaults '((file (styles basic partial-completion))))
#+end_src

* Tools
** Snippets

#+begin_src emacs-lisp
  (use-package yasnippet
    :custom
    (yas-snippet-dirs
     '("~/.emacs.d/snippets"))
    :config
    (yas-global-mode 1))
#+end_src

** TODO Org

My org mode configuration, so I can live and breathe org.

#+begin_src emacs-lisp
  (use-package org
    :hook
    ((org-mode . variable-pitch-mode)
     (org-mode . visual-line-mode)
     (org-mode . mjalen/remove_line_numbers))
    :bind
    (:map org-mode-map
          ("C-c C-'" . #'org-edit-special)) ; For convenience with god mode. c' instead of c '.
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t
          line-spacing 2
          org-highlight-latex-and-related '(latex script entitles)
          org-list-allow-alphabetical t
          org-startup-indented t
          org-pretty-entities t
          org-use-sub-superscripts "{}"
          org-startup-with-inline-images t
          org-image-actual-width '(300)))

  (use-package org-appear :hook (org-mode . org-appear-mode))

  (use-package toc-org
    :hook
    ((org-mode . toc-org-mode)
     (markdown-mode . toc-org-mode)))

  (use-package org-fragtog
    :after org
    :custom
    (org-startup-with-latex-preview t)
    :hook
    (org-mode . org-fragtog-mode)
    :custom
    (org-format-latex-options
     (plist-put org-format-latex-options :scale 0.8)
     (plist-put org-format-latex-options :foreground 'auto)
     (plist-put org-format-latex-options :background 'auto)))

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

  (use-package org-modern
    :hook
    (org-mode . global-org-modern-mode)
    :custom
    (org-modern-keyword nil)
    (org-modern-checkbox nil)
    (org-pretty-entities)
    (org-modern-table nil))

  (use-package markdown-mode)
#+end_src

** LaTeX

#+begin_src emacs-lisp
(setq TeX-auto-save t
      Tex-parse-self t)

(setq-default TeX-master nil)

(use-package flyspell)

(add-hook 'TeX-mode-hook 'turn-on-reftex)
(use-package latex-pretty-symbols)
#+end_src

** Term

#+begin_src emacs-lisp
  (add-hook 'term-mode-hook 'mjalen/remove_line_numbers)
#+end_src

** CL/Slime

#+begin_src emacs-lisp
  ;;; (use-package corfu
  ;;;   :ensure t
  ;;;   :custom
  ;;;   (corfu-cycle t)
  ;;;   (corfu-auto t)
  ;;;   (corfu-auto-prefix 2)
  ;;;   (corfu-auto-delay 0)
  ;;;   (corfu-popupinfo-delay '(0.5 . 0.2))
  ;;;   (corfu-preview-current 'insert)
  ;;;   (corfu-preselect 'prompt)
  ;;;   :bind (:map corfu-map
  ;;;               ("M-SPC" . corfu-insert-seperator)
  ;;;               ("TAB" . corfu-next)
  ;;;               ([tab] . corfu-next)
  ;;;               ("M-TAB" . corfu-previous)
  ;;;               ([backtab] . corfu-previous)
  ;;;               ("S-<return>" . corfu-insert)
  ;;;               ("RET" . corfu-insert))
  ;;;   :config
  ;;;   (global-corfu-mode)
  ;;;   (corfu-history-mode)
  ;;;   (corfu-popupinfo-mode)
  ;;;   :config
  ;;;   (add-hook 'eshell-mode-hook
  ;;;             (lambda () (setq-local corfu-quit-at-boundary t
  ;;;                                    corfu-quit-no-match t
  ;;;                                    corfu-auto nil)
  ;;;               (corfu-mode))
  ;;;             nil
  ;;;             t))

  (use-package slime
    :hook
    (slime-mode . (lambda ()
                    (unless (slime-connected-p)
                      (save-excursion (slime)))))
    :custom
    (slime-setup '(slime-fancy slime-quicklisp slime-asdf)))


  (setq inferior-lisp-program "sbcl")
#+end_src
